import keras_ocr
import cv2
import os
import numpy as np

# Function to perform inpainting using OpenCV
def inpaint_text(image, boxes):
    mask = np.zeros(image.shape[:2], dtype=np.uint8)  # Mask to mark the text regions
    for box in boxes:
        # Extract the box coordinates
        box = np.array(box).astype(int)
        # Draw filled polygon (text bounding box) on the mask
        cv2.fillPoly(mask, [box], 255)
    
    # Inpaint the image using Telea algorithm (or you can experiment with Navier-Stokes)
    inpainted_image = cv2.inpaint(image, mask, inpaintRadius=3, flags=cv2.INPAINT_TELEA)
    return inpainted_image

# Function to process images in a directory
def remove_text_from_images(input_dir, output_dir):
    # Initialize the Keras-OCR pipeline
    pipeline = keras_ocr.pipeline.Pipeline()

    # Ensure output directory exists
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Process each image in the input directory
    for image_name in os.listdir(input_dir):
        if image_name.endswith(('png', 'jpg', 'jpeg')):
            # Read the image
            image_path = os.path.join(input_dir, image_name)
            image = keras_ocr.tools.read(image_path)

            # Perform text detection
            prediction_groups = pipeline.recognize([image])
            boxes = [box for box, text in prediction_groups[0]]

            # Perform inpainting at the character level
            inpainted_image = inpaint_text(image, boxes)

            # Save the output image
            output_path = os.path.join(output_dir, image_name)
            cv2.imwrite(output_path, inpainted_image)

# Example usage
input_directory = 'path_to_input_directory'
output_directory = 'path_to_output_directory'

remove_text_from_images(input_directory, output_directory)












import keras_ocr
import cv2
import os
import numpy as np

# Function to perform inpainting using OpenCV
def inpaint_text(image, boxes):
    mask = np.zeros(image.shape[:2], dtype=np.uint8)  # Mask to mark the text regions
    for box in boxes:
        # Convert bounding box to integer
        box = np.array(box).astype(np.int32)

        # Draw a filled rectangle over the text area using the bounding box
        # Keras OCR gives boxes in the form of a quadrilateral, so we take the top-left and bottom-right points
        top_left = (box[0][0], box[0][1])
        bottom_right = (box[2][0], box[2][1])

        # Draw a filled rectangle on the mask
        cv2.rectangle(mask, top_left, bottom_right, 255, thickness=-1)

    # Inpaint the image using the mask
    inpainted_image = cv2.inpaint(image, mask, inpaintRadius=3, flags=cv2.INPAINT_TELEA)
    return inpainted_image

# Function to process images in a directory
def remove_text_from_images(input_dir, output_dir):
    # Initialize the Keras-OCR pipeline
    pipeline = keras_ocr.pipeline.Pipeline()

    # Ensure output directory exists
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Process each image in the input directory
    for image_name in os.listdir(input_dir):
        if image_name.endswith(('png', 'jpg', 'jpeg')):
            # Read the image
            image_path = os.path.join(input_dir, image_name)
            image = keras_ocr.tools.read(image_path)

            # Perform text detection
            prediction_groups = pipeline.recognize([image])
            boxes = [box for box, text in prediction_groups[0]]

            # Perform inpainting at the character level
            inpainted_image = inpaint_text(image, boxes)

            # Save the output image
            output_path = os.path.join(output_dir, image_name)
            cv2.imwrite(output_path, inpainted_image)

# Example usage
input_directory = 'path_to_input_directory'
output_directory = 'path_to_output_directory'

remove_text_from_images(input_directory, output_directory)










import keras_ocr
import cv2
import os
import numpy as np
from concurrent.futures import ThreadPoolExecutor

# Initialize the Keras-OCR pipeline once
pipeline = keras_ocr.pipeline.Pipeline()

# Function to perform inpainting using OpenCV
def inpaint_text(image, boxes):
    h, w = image.shape[:2]
    mask = np.zeros((h, w), dtype=np.uint8)  # Mask to mark the text regions
    for box in boxes:
        # Convert bounding box to integer
        box = np.array(box).astype(np.int32)

        # Calculate top-left and bottom-right corners from quadrilateral
        top_left = (min(box[:, 0]), min(box[:, 1]))
        bottom_right = (max(box[:, 0]), max(box[:, 1]))

        # Draw filled rectangle on the mask
        cv2.rectangle(mask, top_left, bottom_right, 255, thickness=-1)

    # Inpaint the image using the generated mask
    return cv2.inpaint(image, mask, inpaintRadius=3, flags=cv2.INPAINT_TELEA)

# Function to process a single image
def process_image(image_path, output_path):
    # Read the image
    image = keras_ocr.tools.read(image_path)

    # Perform text detection using the pre-loaded pipeline
    prediction_groups = pipeline.recognize([image])
    boxes = [box for box, text in prediction_groups[0]]

    # Perform inpainting
    inpainted_image = inpaint_text(image, boxes)

    # Save the inpainted image
    cv2.imwrite(output_path, inpainted_image)

# Function to process images in a directory with multi-threading for efficiency
def remove_text_from_images(input_dir, output_dir, num_threads=4):
    # Ensure the output directory exists
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # List of all images in the input directory
    image_files = [f for f in os.listdir(input_dir) if f.endswith(('png', 'jpg', 'jpeg'))]

    # Multi-threaded processing of images
    with ThreadPoolExecutor(max_workers=num_threads) as executor:
        futures = []
        for image_name in image_files:
            input_image_path = os.path.join(input_dir, image_name)
            output_image_path = os.path.join(output_dir, image_name)
            futures.append(executor.submit(process_image, input_image_path, output_image_path))

        # Wait for all threads to complete
        for future in futures:
            future.result()

# Example usage
input_directory = 'path_to_input_directory'
output_directory = 'path_to_output_directory'

remove_text_from_images(input_directory, output_directory, num_threads=8)

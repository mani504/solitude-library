import cv2
import keras_ocr
import numpy as np
from simple_lama_inpainting import SimpleLama
from PIL import Image

# Initialize the Keras-OCR pipeline
pipeline = keras_ocr.pipeline.Pipeline()

# Path to the input image
img_path = 'image.png'

# Read the image
image = cv2.imread(img_path)

# Perform OCR to get text and bounding boxes
results = pipeline.recognize([image])

# Create a blank black image (binary mask)
binary_mask = np.zeros_like(image, dtype=np.uint8)

# Loop through the detected text regions
for text, box in results[0]:
    # Convert the box to integer coordinates
    box = [(int(x), int(y)) for x, y in box]
    
    # Draw a white-filled polygon (bounding rectangle) on the binary mask
    cv2.fillPoly(binary_mask, [np.array(box)], (255, 255, 255))

# Convert the mask to grayscale (binary mask with 255 for areas to inpaint)
binary_mask = cv2.cvtColor(binary_mask, cv2.COLOR_BGR2GRAY)

# Thresholding to ensure pure black and white mask
_, binary_mask = cv2.threshold(binary_mask, 1, 255, cv2.THRESH_BINARY)

# Save the binary mask (optional, can be used for debugging)
mask_path = 'binary_mask_for_lama.jpg'
cv2.imwrite(mask_path, binary_mask)

# Perform LaMa Inpainting
simple_lama = SimpleLama()

# Convert the OpenCV image to PIL format for LaMa
image_pil = Image.open(img_path)
mask_pil = Image.open(mask_path)

# Perform inpainting
result = simple_lama(image_pil, mask_pil)

# Save the inpainted image
result.save('inpainted_image.png')

print("Inpainting completed and saved as 'inpainted_image.png'")
